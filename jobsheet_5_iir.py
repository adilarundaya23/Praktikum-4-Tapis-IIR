# -*- coding: utf-8 -*-
"""Jobsheet 5 IIR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wldRCJlZAtCQCxLH6Kbz7ucTSYlYQ-vL

Nama : Adil Arundaya

NIM : 5312422017

Prodi : Teknik Komputer
"""

import scipy.signal as signal
from IPython.display import Audio, display
from IPython.display import Image, SVG
import matplotlib.pyplot as plt

!pip install scikit-dsp-comm
import sk_dsp_comm.iir_design_helper as iir_d

"""**Traditional IIR Filter Design using the Bilinear Transform**"""

# Parameter filter
fs = 48000  # Frekuensi sampling
f_pass = 5000  # Frekuensi batas bawah jalur lintasan (passband)
f_stop = 8000  # Frekuensi batas atas jalur hentian (stopband)

# Merancang filter Butterworth
b_but, a_but, sos_but = iir_d.IIR_lpf(f_pass, f_stop, 0.5, 60, fs, 'butter')

# Merancang filter Chebyshev tipe 1
b_cheb1, a_cheb1, sos_cheb1 = iir_d.IIR_lpf(f_pass, f_stop, 0.5, 60, fs, 'cheby1')

# Merancang filter Chebyshev tipe 2
b_cheb2, a_cheb2, sos_cheb2 = iir_d.IIR_lpf(f_pass, f_stop, 0.5, 60, fs, 'cheby2')

# Merancang filter elliptic (Cauer)
b_elli, a_elli, sos_elli = iir_d.IIR_lpf(f_pass, f_stop, 0.5, 60, fs, 'ellip')

# Memanggil fungsi freqz_resp_cas_list dari modul iir_d
# Fungsi ini mengambil daftar filter IIR dalam bentuk Second-Order Sections (SOS) dan
# memplot respons frekuensi dari masing-masing filter.
# fs=48 adalah frekuensi sampel yang digunakan dalam filter.
iir_d.freqz_resp_cas_list([sos_but, sos_cheb1, sos_cheb2, sos_elli], 'dB', fs=48)

# Menentukan batas-batas sumbu y pada plot
plt.ylim([-80, 5])

# Memberi judul pada plot
plt.title(r'IIR Lowpass Compare')

# Memberi label pada sumbu y
plt.ylabel(r'Filter Gain (dB)')

# Memberi label pada sumbu x
plt.xlabel(r'Frequency in kHz')

# Menambahkan legenda pada plot yang menjelaskan masing-masing filter
plt.legend((r'Butter order: %d' % (len(a_but) - 1),  # Menampilkan orde filter Butterworth
            r'Cheby1 order: %d' % (len(a_cheb1) - 1),  # Menampilkan orde filter Chebyshev Tipe 1
            r'Cheby2 order: %d' % (len(a_cheb2) - 1),  # Menampilkan orde filter Chebyshev Tipe 2
            r'Elliptic order: %d' % (len(a_elli) - 1)),  # Menampilkan orde filter Elip
           loc='best')  # Menempatkan legenda pada posisi terbaik

# Menambahkan grid pada plot
plt.grid()

"""Gambar di atas adalah grafik perbandingan respons filter lowpass IIR dengan berbagai jenis dan urutan. Sumbu horizontal mewakili frekuensi dalam kHz, sedangkan sumbu vertikal mewakili keuntungan filter (Filter Gain) dalam dB.

Grafik ini membandingkan empat jenis filter lowpass IIR dengan urutan yang berbeda:

Garisan biru: Filter Butterworth dengan urutan 15.


Garisan oranye: Filter Chebyshev 1 dengan urutan 8.


Garisan hijau: Filter Chebyshev 2 dengan urutan 8.


Garisan merah: Filter Elliptic dengan urutan 6.


Perbedaan dalam grafik menunjukkan bagaimana setiap filter meredam frekuensi di luar range lowpass dengan cara yang berbeda. Filter Butterworth memiliki transisi yang lebih halus, sementara filter lainnya menunjukkan berbagai pola redaman frekuensi yang lebih tajam.
"""

#memplot diagram pola nol dan pola pol dari filter yang direpresentasikan dalam bentuk Second-Order Sections (SOS)
iir_d.sos_zplane(sos_but)

"""**A Half-Band Filter Design to Pass up to  W/2 when  fs=8 kHz**"""

import sk_dsp_comm.multirate_helper as mrh

# Desain filter IIR lowpass elliptic
# Fungsi IIR_lpf() digunakan untuk merancang filter IIR lowpass
# dengan menggunakan metode elliptic
# Argumen:
# - 1950: frekuensi cut-off rendah
# - 2050: frekuensi cut-off tinggi
# - 0.5: toleransi ripples (dalam dB)
# - 80: gain stopband (dalam dB)
# - 8000: frekuensi sampel
# - 'ellip': jenis filter (elliptic)
b_lp, a_lp, sos_lp = iir_d.IIR_lpf(1950, 2050, 0.5, 80, 8000., 'ellip')

# Melakukan multirate IIR filtering
# Fungsi multirate_IIR() digunakan untuk mengoptimalkan filter IIR
# untuk penggunaan pada proses multirate
mr_lp = mrh.multirate_IIR(sos_lp)

#digunakan untuk mendapatkan respons frekuensi filter dalam dB pada frekuensi sampel 8000 Hz
mr_lp.freq_resp('db',8000)

"""Gambar tersebut menunjukkan respons frekuensi - Magnitude dari suatu sistem atau filter, yang diukur dalam skala dB (decibel). Pada sumbu horizontal (x) adalah frekuensi dalam Hertz (Hz), dan pada sumbu vertikal (y) adalah gain (penguatan) dalam dB.

Berikut adalah penjelasan lebih detail:

Frekuensi Cut-off: Grafik ini menunjukkan bahwa sistem atau filter ini memiliki frekuensi cut-off sekitar 2000 Hz. Sebelum titik ini, gain (penguatan) hampir konstan di sekitar 0 dB, yang berarti sinyal melewati filter tanpa perubahan besar dalam amplitudonya.
Atentuasi Setelah Cut-off: Setelah frekuensi cut-off, gain turun drastis, menandakan bahwa frekuensi di atas 2000 Hz sangat ditekan atau diattenuasi. Penurunan ini sangat tajam, menunjukkan karakteristik filter yang cukup selektif.
Ripples di Stopband: Setelah titik cut-off, terlihat adanya beberapa ripples atau riak di daerah stopband (sekitar 2000-4000 Hz). Riak ini menunjukkan adanya fluktuasi dalam penguatan, namun secara umum, sinyal di daerah ini tetap sangat terattenuasi.
Jenis Filter: Berdasarkan bentuk respons frekuensinya, ini tampaknya adalah filter low-pass, yang dirancang untuk melewatkan frekuensi rendah dan menekan frekuensi tinggi.


Secara keseluruhan, gambar ini menggambarkan kinerja filter dalam menekan frekuensi di atas 2000 Hz, yang cukup efektif dengan penurunan gain yang signifikan di daerah tersebut.
"""

import numpy as np
from scipy.signal import welch
import matplotlib.pyplot as plt
# Generate 1 juta sampel dari noise Gaussian putih
x = np.random.randn(1000000)

# Terapkan filter (mr_lp) ke sinyal noise putih yang dihasilkan
# Variabel 'y' akan berisi sinyal yang sudah difilter
y = mr_lp.filter(x)

# Plot densitas spektral daya (PSD) dari sinyal noise putih asli 'x'
plt.psd(x, 2**10, 8000)

# Plot densitas spektral daya (PSD) dari sinyal yang sudah difilter 'y'
plt.psd(y, 2**10, 8000)

# Atur judul plot
plt.title(r'Filtering White Noise Having $\sigma_x^2 = 1$')

# Tambahkan legenda ke plot untuk membedakan antara input dan output PSD
plt.legend(('Input PSD', 'Output PSD'), loc='best')

# Atur batas sumbu y untuk visualisasi yang lebih baik
plt.ylim([-130, -30])

# Tampilkan plot
plt.show()

"""Gambar ini menunjukkan plot spektral daya (Power Spectral Density atau PSD) dari input dan output dalam proses penyaringan white noise dengan varians
$\sigma_x^2 = 1$.

Sumbu horizontal menunjukkan frekuensi dalam unit tertentu, dan sumbu vertikal menunjukkan densitas spektral daya dalam unit dB/Hz. Grafik menampilkan dua kurva:

Input PSD (biru): Kurva ini menunjukkan spektral daya dari white noise sebelum disaring, yang tetap konstan pada sekitar -43 dB/Hz untuk seluruh rentang frekuensi.


Output PSD (oranye): Kurva ini menunjukkan spektral daya setelah proses penyaringan white noise. Terlihat ada penurunan yang signifikan pada sekitar frekuensi 2000 Hz, membuat bentuk kurva menurun tajam hingga sekitar -123 dB/Hz sebelum kembali naik sedikit tetapi tetap rendah dibandingkan dengan inputnya.


Dari plot ini, dapat disimpulkan bahwa filter yang digunakan sangat efektif dalam meredam frekuensi sekitar 2000 Hz, bahkan hampir meniadakan spektral daya pada rentang frekuensi tersebut. Jaringan grid yang ditampilkan pada plot membantu memperjelas pembacaan nilai pada setiap sumbu.
"""

from numpy import log10
fs = 8000
print('Expected PSD of %2.3f dB/Hz' % (0-10*log10(fs),))