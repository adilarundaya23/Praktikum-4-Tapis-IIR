# -*- coding: utf-8 -*-
"""Jobsheet 6 IIR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u4CkZTlZ9KByF27ukYBpTPUNBHITzlDF

Nama : Adil Arundaya

NIM : 5312422017

Prodi : Teknik Komputer
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import lfilter, freqz, butter, firls, remez, firwin, firwin2, group_delay
from scipy.fftpack import fft, fftshift

"""**Penyaring Butterworth**"""

# Import library yang dibutuhkan
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter

# Membuat sinyal input
t = 2 * np.pi * np.linspace(-1, 1, 500)  # Membuat vektor waktu dari -2π sampai 2π dengan 500 titik
x = np.sin(0.25 * t * t) + 0.95 * np.sin(2.0 * t)  # Menggabungkan dua sinyal sinusoidal dengan frekuensi berbeda

# Menambahkan noise putih ke sinyal
np.random.seed(1)  # Mengatur seed untuk menghasilkan noise yang sama setiap kali dijalankan
xn = x + np.random.randn(len(t))  # Menambahkan noise Gaussian (putih) ke sinyal

# Membuat filter lowpass Butterworth orde-3
b, a = butter(3, 0.2)  # Membuat koefisien filter Butterworth orde-3 dengan frekuensi cutoff 0.2
z = lfilter(b, a, xn)  # Menerapkan filter pada sinyal yang bising

# Daftar frekuensi cutoff untuk filter IIR
wn = [0.01, 0.05, 0.1, 0.2]  # Frekuensi cutoff yang berbeda

# Menghitung filter IIR untuk berbagai frekuensi cutoff
zz = np.zeros((t.size, 4))  # Membuat matriks untuk menyimpan hasil filter
for i in range(4):
    b, a = butter(3, wn[i])  # Membuat koefisien filter Butterworth orde-3 untuk setiap frekuensi cutoff
    zz[:, i] = lfilter(b, a, xn)  # Menerapkan filter pada sinyal yang bising dan menyimpan hasilnya

# Plot hasilnya
plt.figure(figsize=(16, 8), dpi=80)  # Mengatur ukuran dan resolusi gambar
for i in range(4):
    plt.subplot(2, 2, i+1)  # Membuat subplot 2x2
    plt.plot(t, xn, 'C0--', linewidth=1.5)  # Plot sinyal asli yang bising dengan garis putus-putus biru
    plt.plot(t, zz[:, i], 'C1', linewidth=2.5)  # Plot sinyal yang sudah difilter dengan garis tebal oranye
    plt.xlim([-2 * np.pi, 2 * np.pi])  # Mengatur batas sumbu-x
    plt.grid(True)  # Menampilkan grid
    plt.legend(('Signal', 'Filtered, wn = {}'.format(wn[i])), loc='lower right')  # Menambahkan legenda dengan frekuensi cutoff

plt.show()  # Menampilkan plot

"""Gambar tersebut menampilkan empat grafik yang menunjukkan hasil penyaringan (filtering) dari sinyal berisik (noise) menggunakan filter dengan berbagai nilai cut-off frekuensi (wn). Berikut penjelasan dari setiap subplot dalam gambar:

Subplot Kiri Atas (wn = 0.01):

Sinyal Dasar (Signal): Ditampilkan dengan garis putus-putus biru, merupakan sinyal awal yang memiliki banyak noise.
Sinyal Tersaring (Filtered, wn = 0.01): Ditampilkan dengan garis oranye, menunjukkan hasil setelah sinyal melewati filter dengan nilai cut-off yang sangat rendah (0.01). Hasilnya adalah sinyal yang sangat halus, namun beberapa detail dari sinyal asli mungkin terlewat karena frekuensi tinggi sangat ditekan.
Subplot Kanan Atas (wn = 0.05):

Sinyal Dasar (Signal): Sama dengan sinyal dasar pada semua subplot.
Sinyal Tersaring (Filtered, wn = 0.05): Dengan nilai cut-off 0.05, sinyal hasil filter masih cukup halus tetapi mulai mempertahankan lebih banyak detail dari sinyal asli dibandingkan dengan filter pada subplot kiri atas.
Subplot Kiri Bawah (wn = 0.1):

Sinyal Dasar (Signal): Sama dengan sinyal dasar pada semua subplot.
Sinyal Tersaring (Filtered, wn = 0.1): Dengan nilai cut-off 0.1, sinyal tersaring menunjukkan lebih banyak detail dari sinyal asli, dengan noise yang masih berkurang secara signifikan. Ini menunjukkan keseimbangan antara menghilangkan noise dan mempertahankan detail sinyal asli.
Subplot Kanan Bawah (wn = 0.2):

Sinyal Dasar (Signal): Sama dengan sinyal dasar pada semua subplot.
Sinyal Tersaring (Filtered, wn = 0.2): Dengan nilai cut-off 0.2, sinyal tersaring mempertahankan lebih banyak detail dari sinyal asli, tetapi juga memungkinkan lebih banyak noise untuk tetap ada. Ini menunjukkan bahwa filter dengan cut-off yang lebih tinggi mengizinkan lebih banyak frekuensi tinggi melewati filter.
Secara keseluruhan, gambar ini menunjukkan bagaimana pengaruh berbagai nilai cut-off frekuensi pada filter terhadap sinyal asli yang berisik. Semakin rendah nilai cut-off, semakin halus sinyal hasil filter, tetapi dengan risiko kehilangan detail penting. Sebaliknya, semakin tinggi nilai cut-off, semakin banyak detail yang dipertahankan, tetapi dengan risiko lebih banyak noise yang tersisa.
"""